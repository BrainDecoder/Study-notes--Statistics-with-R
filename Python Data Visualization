#PANDAS BASICS

import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
df_can = pd.read_excel('https://.../Canada.xlsx',
                       sheet_name='Canada by Citizenship',
                       skiprows=range(20),
                       skipfooter=2)
df_can.columns.values #get the list of column headers
df_can.index.values #get the list of indicies
df_can.columns.tolist() # Get the index and columns as lists
df_can.index.tolist()
df_can['Total'] = df_can.sum(axis=1) # Add a 'Total' column
df_can.isnull().sum() #check to see how many null objects there are
df_can.set_index('Country', inplace=True) #use 'Country' column as the index
df_can.index.name = None #optional: remove the name of the index

# 3 ways to view all data in a row
print(df_can.loc['Japan'])
print(df_can.iloc[87])
print(df_can[df_can.index == 'Japan'].T.squeeze())
# 3 ways to view data in a raw and specific columns
print(df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]])
print(df_can.iloc[87, [3, 4, 5, 6, 7, 8]])
# To avoid confusion, integer column names should be converted into strings
df_can.columns = list(map(str, df_can.columns))
# Declare a variable to allow easily call the full range of years (sting column names)
years = list(map(str, range(1980, 2014)))
# Filter by condition
condition = df_can['Continent'] == 'Asia'
df_can[condition]
df_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]

#BASIC VIZ WITH MATPLOTLIB

import matplotlib as mpl
import matplotlib.pyplot as plt
print ('Matplotlib version: ', mpl.__version__) 
# Optional: apply a style to Matplotlib
print(plt.style.available) #list of styles
mpl.style.use(['ggplot']) # optional: for ggplot-like style
# Extract the required data series 
haiti = df_can.loc['Haiti', years]
haiti.plot() #automatic plot
# Custom plot
haiti.index = haiti.index.map(int) #change index values to type integer for plotting
haiti.plot(kind='line')
plt.title('Immigration from Haiti')
plt.ylabel('Number of immigrants')
plt.xlabel('Years')
plt.text(2000, 6000, '2010 Earthquake') #coment on the plot: plt.text(x, y, label)
#plt.text(20, 6000, '2010 Earthquake') - for years as strings, 20 is index position
plt.show() #show the updates made to the figure

# Plot several rows
df_CI = df_can.loc[['India', 'China'], years]
df_CI.plot(kind='line')
df_CI = df_CI.transpose() #if data orientation is wrong, not required for haiti as it's a series, not dataframe
df_CI.index = df_CI.index.map(int)
df_CI.plot(kind='line')
plt.title('Immigrants from China and India')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()

# OTHER PLOTS
# `bar` for vertical bar plots
# `barh` for horizontal bar plots
# `hist` for histogram
# `box` for boxplot
# `kde` or `density` for density plots
# `area` for area plots
# `pie` for pie plots
# `scatter` for scatter plots
# `hexbin` for hexbin plot

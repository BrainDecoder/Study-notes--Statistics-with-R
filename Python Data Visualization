#PANDAS BASICS

import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
df_can = pd.read_excel('https://.../Canada.xlsx',
                       sheet_name='Canada by Citizenship',
                       skiprows=range(20),
                       skipfooter=2)
df_can.columns.values #get the list of column headers
df_can.index.values #get the list of indicies
df_can.columns.tolist() # Get the index and columns as lists
df_can.index.tolist()
df_can['Total'] = df_can.sum(axis=1) # Add a 'Total' column
df_can.isnull().sum() #check to see how many null objects there are
df_can.set_index('Country', inplace=True) #use 'Country' column as the index
df_can.index.name = None #optional: remove the name of the index

# 3 ways to view all data in a row
print(df_can.loc['Japan'])
print(df_can.iloc[87])
print(df_can[df_can.index == 'Japan'].T.squeeze())
# 3 ways to view data in a raw and specific columns
print(df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]])
print(df_can.iloc[87, [3, 4, 5, 6, 7, 8]])
# To avoid confusion, integer column names should be converted into strings
df_can.columns = list(map(str, df_can.columns))
# Declare a variable to allow easily call the full range of years (sting column names)
years = list(map(str, range(1980, 2014)))
# Filter by condition
condition = df_can['Continent'] == 'Asia'
df_can[condition]
df_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]

#BASIC VIZ WITH MATPLOTLIB

import matplotlib as mpl
import matplotlib.pyplot as plt
print ('Matplotlib version: ', mpl.__version__) 
# Optional: apply a style to Matplotlib
print(plt.style.available) #list of styles
mpl.style.use(['ggplot']) # optional: for ggplot-like style
# Extract the required data series 
haiti = df_can.loc['Haiti', years]
haiti.plot() #automatic plot

# Line Plot
haiti.index = haiti.index.map(int) #change index values to type integer for plotting
haiti.plot(kind='line')
plt.title('Immigration from Haiti')
plt.ylabel('Number of immigrants')
plt.xlabel('Years')
plt.text(2000, 6000, '2010 Earthquake') #coment on the plot: plt.text(x, y, label)
#plt.text(20, 6000, '2010 Earthquake') - for years as strings, 20 is index position
plt.show() #show the updates made to the figure

# Plot several rows
df_CI = df_can.loc[['India', 'China'], years]
df_CI.plot(kind='line')
df_CI = df_CI.transpose() #if data orientation is wrong, not required for haiti as it's a series, not dataframe
df_CI.index = df_CI.index.map(int)
df_CI.plot(kind='line')
plt.title('Immigrants from China and India')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()

# OTHER PLOTS
# `bar` for vertical bar plots
# `barh` for horizontal bar plots
# `hist` for histogram
# `box` for boxplot
# `kde` or `density` for density plots
# `area` for area plots
# `pie` for pie plots
# `scatter` for scatter plots
# `hexbin` for hexbin plot

# COLORS
import matplotlib
for name, hex in matplotlib.colors.cnames.items():
    print(name, hex)

# Area Plot
# Separate the top 5 countries
df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True) #sort desc.
df_top5 = df_can.head() # get the top 5 entries
df_top5 = df_top5[years].transpose() # transpose the dataframe
df_top5.head() #show result
# Draw area plot
df_top5.index = df_top5.index.map(int) # change index values to integer
df_top5.plot(kind='area', #type of plot
             alpha=0.25, #transparancy, 0-1 values, default a=0.5
             stacked=False, #True by default for area plots = all NaN will be made 0
             figsize=(20, 10), # pass a tuple (x, y) size
            )
plt.title('Immigration Trend of Top 5 Countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()

# Histograms
count, bin_edges = np.histogram(df_can['2013']) # returns 2 values
print(count) # frequency count
print(bin_edges) # bin ranges, default = 10 bins
df_can['2013'].plot(kind='hist', figsize=(8, 5), xticks=bin_edges) # same as df_can['2013'].plot.hist()
plt.title('Histogram of Immigration from 195 Countries in 2013')
plt.ylabel('Number of Countries') # add y-label
plt.xlabel('Number of Immigrants') # add x-label
plt.show()
# Multiple histogram
df_can.loc[['Denmark', '...', 'Sweden'], years].plot.hist() # generate histogram
df_t = df_can.loc[['Denmark', '...', 'Sweden'], years].transpose() #if previous gives wrong graph
count, bin_edges = np.histogram(df_t, 15) # get the x-tick values
xmin = bin_edges[0] - 10 #adding buffer of 10 to the first bin for aesthetic purposes 
xmax = bin_edges[-1] + 10 # same for the last bin value
df_t.plot(kind ='hist', 
          figsize=(10, 6),
          bins=15, #increase the bin size
          alpha=0.6, #set transparency to 60%
          xticks=bin_edges,
          color=['coral', 'darkslateblue', 'mediumseagreen'],
          stacked = True, #if plots should not overlap each other
          xlim=(xmin, xmax)
         )
plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')
plt.show()

# Bar Charts
df_iceland = df_can.loc['Iceland', years] #get the data
df_iceland.plot(kind='bar', figsize=(10, 6), color='steelblue', rot=90) #barh for horizontal bars, ?rot rotates bars by 90 degrees?
plt.xlabel('Year') # add to x-label to the plot
plt.ylabel('Number of immigrants') # add y-label to the plot
plt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot
plt.annotate(        #annotate arrow 
    '',              #string, blank here
    xy=(32, 70),     #head of the arrow at point (year 2012 , pop 70)
    xytext=(28, 20), #base of the arrow at point (year 2008 , pop 20)
    xycoords='data', #will use the coordinate system of the object being annotated 
    arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)
    #-> = standard style, arc3 = straight line, lw = line width
    )
plt.annotate(        #annotate Text
    '2008 - 2011 Financial Crisis', # text to display
    xy=(28, 30),     # start the text at at point (year 2008 , pop 30)
    rotation=72.5,   # based on trial and error to match the arrow
    va='bottom',     # want the text to be vertically 'bottom' aligned
    ha='left')       # want the text to be horizontally 'left' algned
for index, value in enumerate(df_can): # annotate value labels to each country
    label = format(int(value), ',') # format int with commas
    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)
    plt.annotate(label, xy=(value - 47000, index - 0.10), color='white')
plt.show()
